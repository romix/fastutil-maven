/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2005-2008 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package it.unimi.dsi.fastutil.io;

import java.io.*;
import java.util.*;
import it.unimi.dsi.fastutil.booleans.*;
import it.unimi.dsi.fastutil.bytes.*;
import it.unimi.dsi.fastutil.shorts.*;
import it.unimi.dsi.fastutil.ints.*;
import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.floats.*;
import it.unimi.dsi.fastutil.doubles.*;

/** Provides static methods to perform easily textual I/O.
 *
 * <P>This class fills a gap in the Java API: a natural operation on sequences
 * of primitive elements is to load or store them in textual form. This format
 * makes files humanly readable.
 * 
 * <P>For each primitive type, this class provides methods that read elements
 * from a {@link BufferedReader} or from a filename (which will be opened
 * using a buffer of {@link #BUFFER_SIZE} bytes) into an array. Analogously,
 * there are methods that store the content of an array (fragment) or the
 * elements returned by an iterator to a {@link PrintStream} or to a given
 * filename.
 *
 * <P>Finally, there are useful wrapper methods that {@linkplain #asIntIterator(CharSequence)
 * exhibit a file as a type-specific iterator}.
 *
 * <P>Note that, contrarily to the binary case, there is no way to 
 * {@linkplain BinIO#loadInts(CharSequence) load from a file without providing an array}. You can
 * easily work around the problem as follows:
 * <pre>
 * array = IntIterators.unwrap( TextIO.asIntIterator("foo") );
 * </pre>
 *
 * @since 4.4
 */

public class TextIO {

	private TextIO() {}

	/** The size of the buffer used for all I/O on files. */
	final public static int BUFFER_SIZE = 8 * 1024;

#include "java/it/unimi/dsi/fastutil/io/BooleanTextIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/ByteTextIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/ShortTextIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/IntTextIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/LongTextIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/FloatTextIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/DoubleTextIOFragment.h"

}
