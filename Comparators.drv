/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2003-2008 Paolo Boldi and Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

#if #keys(reference)
import java.util.Comparator;
#endif

/** A class providing static methods and objects that do useful things with comparators.
 */

public class COMPARATORS {

	private COMPARATORS() {}

	/** A type-specific comparator mimicking the natural order. */

	@SuppressWarnings("unchecked")
	public static final KEY_COMPARATOR NATURAL_COMPARATOR = new KEY_ABSTRACT_COMPARATOR() {
			public final int compare( final KEY_TYPE a, final KEY_TYPE b ) {
#if #keys(primitive)
				return KEY_CMP( a, b );
#else
				return ((Comparable)a).compareTo(b);
#endif
			}
		};

	/** A type-specific comparator mimicking the opposite of the natural order. */

	@SuppressWarnings("unchecked")
	public static final KEY_COMPARATOR OPPOSITE_COMPARATOR = new KEY_ABSTRACT_COMPARATOR() {
			public final int compare( final KEY_TYPE a, final KEY_TYPE b ) {
#if #keys(primitive)
				return KEY_CMP( b, a );
#else
				return ((Comparable)b).compareTo(a);
#endif
			}
		};

	/** Returns a comparator representing the opposite order of the given comparator. 
	 *
	 * @param c a comparator.
	 * @return a comparator representing the opposite order of <code>c</code>.
	 */
	public static KEY_GENERIC KEY_COMPARATOR KEY_GENERIC oppositeComparator( final KEY_COMPARATOR KEY_GENERIC c ) {
		return new KEY_ABSTRACT_COMPARATOR KEY_GENERIC() {
				private final KEY_COMPARATOR KEY_GENERIC comparator = c;
				public final int compare( final KEY_GENERIC_TYPE a, final KEY_GENERIC_TYPE b ) {
					return - comparator.compare( a, b );
				}
			};
	}
}
