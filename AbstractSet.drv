/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2002-2008 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import java.util.Set;

/**  An abstract class providing basic methods for sets implementing a type-specific interface. */

public abstract class ABSTRACT_SET KEY_GENERIC extends ABSTRACT_COLLECTION KEY_GENERIC implements Cloneable, SET KEY_GENERIC {
	 
	protected ABSTRACT_SET() {}

	public abstract KEY_ITERATOR KEY_GENERIC iterator();

	public boolean equals( final Object o ) {
		if ( o == this ) return true;
		if ( !( o instanceof Set ) ) return false;

		Set<?> s = (Set<?>) o;
		if ( s.size() != size() ) return false;
		return containsAll(s);
	}


	/** Returns a hash code for this set.
	 *
	 * The hash code of a set is computed by summing the hash codes of
	 * its elements.
	 *
	 * @return a hash code for this set.
	 */

	public int hashCode() {
		int h = 0, n = size();
		KEY_ITERATOR KEY_GENERIC i = iterator();
		KEY_GENERIC_TYPE k;

		while( n-- != 0 ) {
			k = i.NEXT_KEY(); // We need k because KEY2INT() is a macro with repeated evaluation.
			h += KEY2INT( k );
		}
		return h;
	}


	public boolean remove( KEY_TYPE k ) {
		throw new UnsupportedOperationException();
	}

#if #keys(primitive)

	/** Delegates to <code>remove()</code>.
	 *
	 * @param k the element to be removed.
	 * @return true if the set was modified.
	 */
	public boolean rem( KEY_TYPE k ) {
		return remove( k );
	}

	/** Delegates to the corresponding type-specific method. */
	public boolean remove( final Object o ) {
		return remove( KEY_OBJ2TYPE( o ) );
	}

#endif
}
