/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2004-2008 Sebastiano Vigna 
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the License, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 */


#if #keyclass(Byte)

// HORRIBLE kluges to work around bug #6478546

private final static int MAX_IO_LENGTH = 1024 * 1024;

private static int read( final InputStream is, final byte a[], final int offset, final int length ) throws IOException { 
	if ( length == 0 ) return 0;

	int read = 0, result;
	do {
		result = is.read( a, offset + read, Math.min( length - read, MAX_IO_LENGTH ) );
		if ( result < 0 ) return read;
		read += result;
	} while( read < length );

	return read;
}

private static void write( final OutputStream outputStream, final byte a[], final int offset, final int length ) throws IOException { 
	int written = 0;
	while( written < length ) { 
		outputStream.write( a, offset + written, Math.min( length - written, MAX_IO_LENGTH ) );
		written += Math.min( length - written, MAX_IO_LENGTH );
	}
}

private static void write( final DataOutput dataOutput, final byte a[], final int offset, final int length ) throws IOException { 
	int written = 0;
	while( written < length ) { 
		dataOutput.write( a, offset + written, Math.min( length - written, MAX_IO_LENGTH ) );
		written += Math.min( length - written, MAX_IO_LENGTH );
	}
}

// Additional read/write methods to work around the DataInput/DataOutput schizophrenia.

/** Loads bytes from a given input stream, storing them in a given array fragment.
 *
 * <p>Note that this method is going to be significantly faster than {@link #loadBytes(DataInput,byte[],int,int)}
 * as it uses {@link InputStream}'s bulk-read methods.
 *
 * @param inputStream an input stream.
 * @param array an array which will be filled with data from <code>inputStream</code>.
 * @param offset the index of the first element of <code>array</code> to be filled.
 * @param length the number of elements of <code>array</code> to be filled.
 * @return the number of elements actually read from <code>inputStream</code> (it might be less than <code>length</code> if <code>inputStream</code> ends).
 */
public static int LOAD_KEYS( final InputStream inputStream, final KEY_TYPE[] array, final int offset, final int length ) throws IOException {
	return read( inputStream, array, offset, length );
}

/** Loads bytes from a given input stream, storing them in a given array.
 *
 * <p>Note that this method is going to be significantly faster than {@link #loadBytes(DataInput,byte[])}
 * as it uses {@link InputStream}'s bulk-read methods.
 *
 * @param inputStream an input stream.
 * @param array an array which will be filled with data from <code>inputStream</code>.
 * @return the number of elements actually read from <code>inputStream</code> (it might be less than the array length if <code>inputStream</code> ends).
 */
public static int LOAD_KEYS( final InputStream inputStream, final KEY_TYPE[] array ) throws IOException {
	return read( inputStream, array, 0, array.length );
}

/** Stores an array fragment to a given output stream.
 *
 * <p>Note that this method is going to be significantly faster than {@link #storeBytes(byte[],int,int,DataOutput)}
 * as it uses {@link OutputStream}'s bulk-read methods.
 *
 * @param array an array whose elements will be written to <code>outputStream</code>.
 * @param offset the index of the first element of <code>array</code> to be written.
 * @param length the number of elements of <code>array</code> to be written.
 * @param outputStream an output stream.
 */
public static void STORE_KEYS( final KEY_TYPE array[], final int offset, final int length, final OutputStream outputStream ) throws IOException {
	write( outputStream, array, offset, length );
}

/** Stores an array to a given output stream.
 *
 * <p>Note that this method is going to be significantly faster than {@link #storeBytes(byte[],DataOutput)}
 * as it uses {@link OutputStream}'s bulk-read methods.
 *
 * @param array an array whose elements will be written to <code>outputStream</code>.
 * @param outputStream an output stream.
 */
public static void STORE_KEYS( final KEY_TYPE array[], final OutputStream outputStream ) throws IOException {
	write( outputStream, array, 0, array.length );
}

#endif


/** Loads elements from a given data input, storing them in a given array fragment.
 *
 * @param dataInput a data input.
 * @param array an array which will be filled with data from <code>dataInput</code>.
 * @param offset the index of the first element of <code>array</code> to be filled.
 * @param length the number of elements of <code>array</code> to be filled.
 * @return the number of elements actually read from <code>dataInput</code> (it might be less than <code>length</code> if <code>dataInput</code> ends).
 */
public static int LOAD_KEYS( final DataInput dataInput, final KEY_TYPE[] array, final int offset, final int length ) throws IOException {
	PACKAGE.ARRAYS.ensureOffsetLength( array, offset, length );
	int i = 0;
	try {
		for( i = 0; i < length; i++ ) array[ i + offset ] = dataInput.READ_KEY();
	}
	catch( EOFException itsOk ) {}
	return i;
}

/** Loads elements from a given data input, storing them in a given array.
 *
 * @param dataInput a data input.
 * @param array an array which will be filled with data from <code>dataInput</code>.
 * @return the number of elements actually read from <code>dataInput</code> (it might be less than the array length if <code>dataInput</code> ends).
 */
public static int LOAD_KEYS( final DataInput dataInput, final KEY_TYPE[] array ) throws IOException {
	int i = 0;
	try {
		final int length = array.length;
		for( i = 0; i < length; i++ ) array[ i ] = dataInput.READ_KEY();
	}
	catch( EOFException itsOk ) {}
	return i;
}

/** Loads elements from a file given by a {@link File} object, storing them in a given array fragment.
 *
 * @param file a file.
 * @param array an array which will be filled with data from the specified file.
 * @param offset the index of the first element of <code>array</code> to be filled.
 * @param length the number of elements of <code>array</code> to be filled.
 * @return the number of elements actually read from the given file (it might be less than <code>length</code> if the file is too short).
 */
public static int LOAD_KEYS( final File file, final KEY_TYPE[] array, final int offset, final int length ) throws IOException {
	PACKAGE.ARRAYS.ensureOffsetLength( array, offset, length );

	final FileInputStream fis = new FileInputStream( file );
#if #keyclass(Byte)
	final int result = read( fis, array, offset, length );
	fis.close();
	return result;
#else
	final DataInputStream dis = new DataInputStream( new FastBufferedInputStream( fis ) );

	int i = 0;
	try {
		for( i = 0; i < length; i++ ) array[ i + offset ] = dis.READ_KEY();
	}
	catch( EOFException itsOk ) {}

	dis.close();
	return i;
#endif
}

/** Loads elements from a file given by a pathname, storing them in a given array fragment.
 *
 * @param filename a filename.
 * @param array an array which will be filled with data from the specified file.
 * @param offset the index of the first element of <code>array</code> to be filled.
 * @param length the number of elements of <code>array</code> to be filled.
 * @return the number of elements actually read from the given file (it might be less than <code>length</code> if the file is too short).
 */
public static int LOAD_KEYS( final CharSequence filename, final KEY_TYPE[] array, final int offset, final int length ) throws IOException {
	return LOAD_KEYS( new File( filename.toString() ), array, offset, length );
}

/** Loads elements from a file given by a {@link File} object, storing them in a given array.
 *
 * @param file a file.
 * @param array an array which will be filled with data from the specified file.
 * @return the number of elements actually read from the given file (it might be less than the array length if the file is too short).
 */
public static int LOAD_KEYS( final File file, final KEY_TYPE[] array ) throws IOException {
	final FileInputStream fis = new FileInputStream( file );
#if #keyclass(Byte)
	final int result = read( fis, array, 0, array.length );
	fis.close();
	return result;
#else
	final DataInputStream dis = new DataInputStream( new FastBufferedInputStream( fis ) );

	int i = 0;
	try {
		final int length = array.length;
		for( i = 0; i < length; i++ ) array[ i ] = dis.READ_KEY();
	}
	catch( EOFException itsOk ) {}

	dis.close();

	return i;
#endif
}

/** Loads elements from a file given by a pathname, storing them in a given array.
 *
 * @param filename a filename.
 * @param array an array which will be filled with data from the specified file.
 * @return the number of elements actually read from the given file (it might be less than the array length if the file is too short).
 */
public static int LOAD_KEYS( final CharSequence filename, final KEY_TYPE[] array ) throws IOException {
	return LOAD_KEYS( new File( filename.toString() ), array );
}

/** Loads elements from a file given by a {@link File} object, storing them in a new array.
 *
 * <P>Note that the length of the returned array will be computed 
 * dividing the specified file size by the number of bytes used to
 * represent each element.
 *
 * @param file a file.
 * @return an array filled with the content of the specified file.
 */
public static KEY_TYPE[] LOAD_KEYS( final File file ) throws IOException {
	final FileInputStream fis = new FileInputStream( file );

#if #keyclass(Boolean)
	final long length = fis.getChannel().size();
#else
	final long length = fis.getChannel().size() / ( KEY_CLASS.SIZE / 8 );
#endif

	if ( length > Integer.MAX_VALUE ) throw new IllegalArgumentException( "File too long: " + fis.getChannel().size()+ " bytes (" + length + " elements)" ); 

	final KEY_TYPE[] array = new KEY_TYPE[ (int)length ];

#if #keyclass(Byte)
	if ( read( fis, array, 0, (int)length ) < length ) throw new EOFException();
	fis.close();
#else
	final DataInputStream dis = new DataInputStream( new FastBufferedInputStream( fis ) );
	for( int i = 0; i < length; i++ ) array[ i ] = dis.READ_KEY();
	dis.close();
#endif
	return array;
}

/** Loads elements from a file given by a filename, storing them in a new array.
 *
 * <P>Note that the length of the returned array will be computed 
 * dividing the specified file size by the number of bytes used to
 * represent each element.
 *
 * @param filename a filename.
 * @return an array filled with the content of the specified file.
 */
public static KEY_TYPE[] LOAD_KEYS( final CharSequence filename ) throws IOException {
	return LOAD_KEYS( new File( filename.toString() ) );
}

/** Stores an array fragment to a given data output.
 *
 * @param array an array whose elements will be written to <code>dataOutput</code>.
 * @param offset the index of the first element of <code>array</code> to be written.
 * @param length the number of elements of <code>array</code> to be written.
 * @param dataOutput a data output.
 */
public static void STORE_KEYS( final KEY_TYPE array[], final int offset, final int length, final DataOutput dataOutput ) throws IOException {
	PACKAGE.ARRAYS.ensureOffsetLength( array, offset, length );
#if #keyclass(Byte)
	write( dataOutput, array, offset, length );
#else
	for( int i = 0; i < length; i++ ) dataOutput.WRITE_KEY( array[ offset + i ] );
#endif
}

/** Stores an array to a given data output.
 *
 * @param array an array whose elements will be written to <code>dataOutput</code>.
 * @param dataOutput a data output.
 */
public static void STORE_KEYS( final KEY_TYPE array[], final DataOutput dataOutput ) throws IOException {
#if #keyclass(Byte)
	write( dataOutput, array, 0, array.length );
#else
	final int length = array.length;
	for( int i = 0; i < length; i++ ) dataOutput.WRITE_KEY( array[ i ] );
#endif
}

/** Stores an array fragment to a file given by a {@link File} object.
 *
 * @param array an array whose elements will be written to <code>filename</code>.
 * @param offset the index of the first element of <code>array</code> to be written.
 * @param length the number of elements of <code>array</code> to be written.
 * @param file a file.
 */
public static void STORE_KEYS( final KEY_TYPE array[], final int offset, final int length, final File file ) throws IOException {
	PACKAGE.ARRAYS.ensureOffsetLength( array, offset, length );
#if #keyclass(Byte)
	final OutputStream os = new FastBufferedOutputStream( new FileOutputStream( file ) );
	write( os, array, offset, length );
	os.close();
#else
	final DataOutputStream dos = new DataOutputStream( new FastBufferedOutputStream( new FileOutputStream( file ) ) );
	for( int i = 0; i < length; i++ ) dos.WRITE_KEY( array[ offset + i ] );
	dos.close();
#endif
}

/** Stores an array fragment to a file given by a pathname.
 *
 * @param array an array whose elements will be written to <code>filename</code>.
 * @param offset the index of the first element of <code>array</code> to be written.
 * @param length the number of elements of <code>array</code> to be written.
 * @param filename a filename.
 */
public static void STORE_KEYS( final KEY_TYPE array[], final int offset, final int length, final CharSequence filename ) throws IOException {
	STORE_KEYS( array, offset, length, new File( filename.toString() ) );
}

/** Stores an array to a file given by a {@link File} object.
 *
 * @param array an array whose elements will be written to <code>filename</code>.
 * @param file a file.
 */
public static void STORE_KEYS( final KEY_TYPE array[], final File file ) throws IOException {
#if #keyclass(Byte)
	final OutputStream os = new FastBufferedOutputStream( new FileOutputStream( file ) );
	write( os, array, 0, array.length );
	os.close();
#else
	final int length = array.length;
	final DataOutputStream dos = new DataOutputStream( new FastBufferedOutputStream( new FileOutputStream( file ) ) );
	for( int i = 0; i < length; i++ ) dos.WRITE_KEY( array[ i ] );
	dos.close();
#endif
}

/** Stores an array to a file given by a pathname.
 *
 * @param array an array whose elements will be written to <code>filename</code>.
 * @param filename a filename.
 */
public static void STORE_KEYS( final KEY_TYPE array[], final CharSequence filename ) throws IOException {
	STORE_KEYS( array, new File( filename.toString() ) );
}

/** Stores the element returned by an iterator to a given data output.
 *
 * @param i an iterator whose output will be written to <code>dataOutput</code>.
 * @param dataOutput a filename.
 */
public static void STORE_KEYS( final KEY_ITERATOR i, final DataOutput dataOutput ) throws IOException {
	while( i.hasNext() ) dataOutput.WRITE_KEY( i.NEXT_KEY() );
}

/** Stores the element returned by an iterator to a file given by a {@link File} object.
 *
 * @param i an iterator whose output will be written to <code>filename</code>.
 * @param file a file.
 */
public static void STORE_KEYS( final KEY_ITERATOR i, final File file ) throws IOException {
	final DataOutputStream dos = new DataOutputStream( new FastBufferedOutputStream( new FileOutputStream( file ) ) );
	while( i.hasNext() ) dos.WRITE_KEY( i.NEXT_KEY() );
	dos.close();
}

/** Stores the element returned by an iterator to a file given by a pathname.
 *
 * @param i an iterator whose output will be written to <code>filename</code>.
 * @param filename a filename.
 */
public static void STORE_KEYS( final KEY_ITERATOR i, final CharSequence filename ) throws IOException {
	STORE_KEYS( i, new File( filename.toString() ) );
}

/** A wrapper that exhibits the content of a data input stream as a type-specific iterator. */

final private static class KEY_DATA_INPUT_WRAPPER extends KEY_ABSTRACT_ITERATOR {
	final private DataInput dataInput;
	private boolean toAdvance = true;
	private boolean endOfProcess = false;
	private KEY_TYPE next;

	public KEY_DATA_INPUT_WRAPPER( final DataInput dataInput ) {
		this.dataInput = dataInput;
	}

	public boolean hasNext() {
		if ( ! toAdvance ) return ! endOfProcess;

		toAdvance = false;

		try {
			next = dataInput.READ_KEY();
		}
		catch( EOFException eof ) {
			endOfProcess = true;
		}
		catch( IOException rethrow ) { throw new RuntimeException( rethrow ); }

		return ! endOfProcess;
	}

	public KEY_TYPE NEXT_KEY() {
		if (! hasNext()) throw new NoSuchElementException();
		toAdvance = true;
		return next;
	}
}



/** Wraps the given data input stream into an iterator.
 *
 * @param dataInput a data input.
 */
public static KEY_ITERATOR AS_KEY_ITERATOR( final DataInput dataInput ) {
	return new KEY_DATA_INPUT_WRAPPER( dataInput );
}

/** Wraps a file given by a {@link File} object into an iterator.
 *
 * @param file a file.
 */
public static KEY_ITERATOR AS_KEY_ITERATOR( final File file ) throws IOException {
	return new KEY_DATA_INPUT_WRAPPER( new DataInputStream( new FastBufferedInputStream( new FileInputStream( file ) ) ) );
}

/** Wraps a file given by a pathname into an iterator.
 *
 * @param filename a filename.
 */
public static KEY_ITERATOR AS_KEY_ITERATOR( final CharSequence filename ) throws IOException {
	return AS_KEY_ITERATOR( new File( filename.toString() ) );
}

